---
alwaysApply: false
---

# 프론트엔드 개발 컨벤션 (v: context7)

## 1. 컴포넌트 아키텍처

- **반드시 [.docs/frontend.md](mdc:.docs/frontend.md)에 정의된 기능 중심의 컴포넌트 구조를 따라야 합니다.**
  - **공통 컴포넌트**: 새로운 기능을 만들 때, 버튼, 입력창, 모달 등 범용적인 UI 요소는 반드시 `/components/common` 폴더의 기존 컴포넌트를 먼저 확인하고 재사용합니다. 여기에 없다면 새로 만들어서 추가합니다.
  - **기능별 컴포넌트**: 특정 도메인(예: `chat`)에서만 사용되는 컴포넌트는 `/components/chat` 과 같이 기능별 폴더 하위에 작성합니다.

## 2. Chakra UI v3 컨벤션

- **기존 컨벤션을 따르는 것을 최우선으로 합니다.**
  - `Button`, `Input` 등 기존에 구현된 공통 컴포넌트의 디자인과 스타일(props, theme 등)을 확인하고, 이를 확장하여 사용합니다.
  - 색상, 폰트 사이즈, 간격(spacing) 등은 Chakra UI의 테마(`theme.ts`)에 정의된 값을 우선적으로 사용해야 합니다. 임의의 스타일 값(예: `color: '#FF0000'`) 사용을 지양합니다.
  - 컴포넌트 스타일링 시, 스타일드 컴포넌트 문법보다는 Chakra UI에서 제공하는 스타일 프롭스(Style Props) (예: `<Box bg="red.500" p={4}>`)를 적극적으로 사용합니다.

## 3. 로직 재사용

- **Hooks**: API 호출, 상태 관리 등 반복되는 로직은 반드시 `/hooks` 폴더의 커스텀 훅을 재사용하거나, 새로 만들어 다른 곳에서도 쓸 수 있게 추상화해야 합니다.
- **API Client**: 모든 서버 통신은 `/lib/api.ts` 등에 설정된 `axios` 인스턴스를 통해 이루어져야 합니다.
